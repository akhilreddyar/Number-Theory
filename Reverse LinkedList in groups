
class Solution {
    public ListNode rev(ListNode head){
        ListNode cur=head,prev=null,next=null;
        while(cur!=null){
            next = cur.next;
            cur.next=prev;
            prev=cur;
            cur=next;
        }
        return prev;
    }
    public void trav(ListNode temp){
        if(temp==null) return;
        System.out.print(temp.val+" ");
        trav(temp.next);
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode cur=head,prev=null;
        Queue<ListNode> q1 = new LinkedList<>();
        while(cur!=null){
            ListNode start = cur;
            for(int i = 0;i<k;i++){
                prev=cur;
                if(cur==null) continue;
                cur=cur.next;
            }
            if(prev!=null){
                prev.next=null;
            start = rev(start);
            }
          //  trav(start);
            q1.add(start);
            //System.out.println();
        }
        ListNode out = null,terex=null;
        while(!q1.isEmpty()){
            ListNode pre = q1.remove();
            if(out==null){
               out = pre;
                terex=pre;
                while(terex.next!=null) 
               terex=terex.next;
            }else{ 
           while(terex.next!=null) 
               terex=terex.next;
                terex.next=pre;
            }
        }
        return out;
    }
}
