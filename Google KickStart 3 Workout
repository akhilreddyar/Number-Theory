// another just optimization problem
//binary search
import java.io.*; 
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
 
class Solution 
{ 
  
    public static void main(String[] args)  
    { 
  Scanner scan = new Scanner(System.in);
  int tc = scan.nextInt();
 for(int tc_=0;tc_<tc;tc_++) {
	  int n = scan.nextInt();
	  int[] a = new int[n];
	  int k = scan.nextInt();
	  for(int i = 0;i<n;i++)
		  a[i]=scan.nextInt();
	  int maxdiff = 0;
	  for(int i = 1;i<n;i++) {
		  maxdiff=Math.max(maxdiff, a[i]-a[i-1]);
	  }
	  int low = 1,high =maxdiff;
	  int ans = maxdiff;
	  while(low<=high) {
		  int mid = (low+high)/2;
		  if(isposs(mid,a,k)) {
			  ans = Math.min(ans,mid);
			  high = mid-1;
		  }else 
			  low = mid+1;
	  }
	  System.out.println("Case #"+((tc_+1))+": "+ans);
  }

    }
    static boolean isposs(int mid ,int[] a ,int k) {
    	for(int i = 1;i<a.length;i++) {
    		int diff = (a[i]-a[i-1]);
    		
    		//System.out.println("Diff"+diff);
    		if(diff>mid) {
    			int cur = (int)Math.ceil((double)(diff)/mid)-1;
    			k-=cur;
    		}
    	}
    	if(k<0) return false;
    	return true;
    }
    /* 4
  3 1
100 200 230
5 2
10 13 15 16 17
5 6
9 10 20 26 30
8 3
1 2 3 4 5 6 7 10*/
} 
